AWSTemplateFormatVersion: 2010-09-09
Description: ESImportECS
Parameters:
  ImageId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  ESImportImage:
    Type: String
    Description: Full docker container image name
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: Select a VPC that allows instances to access the Internet.
  KeyName:
    Type: String
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.
  InstancesSbunet:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: Subnets in your selected VPC.
  DesiredCapacity:
    Type: Number
    Default: "1"
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: "1"
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: m5a.xlarge
  Memory:
    Type: Number
    Default: "512"
    Description: Docker Memory.
  MssqlHost:
    Type: String
    Description: MssqlHost
  MssqlUser:
    Type: String
    Description: MssqlUser
  MssqlPassword:
    Type: String
    NoEcho: "true"
    Description: MssqlPassword
  MssqlParameterName:
    Type: String
    NoEcho: "true"
    Description: Name of SSM parameter that we fetch password
  SnsTopicArn:
    Type: String
    Description: SnsTopicArn
  PpkSqsQueueURL:
    Type: String
    Description: PpkSqsQueueURL
  PpkDlqQueueURL:
    Type: String
    Description: PpkDlqQueueURL
  FirehoseStream:
    Description: Delivery stream to send ESImport logs
    Type: String
    Default: "syslog-stream"
  ElevenComponent:
    Description: Component type to specify in logger
    Type: String
    Default: "ESImport Sys"
  DatabaseCallsWaitInSeconds:
    Description: DB calls wait in seconds
    Type: Number
    Default: 5
  DatabaseQueryTimeout:
    Description: DB query timeout in seconds
    Type: Number
    Default: 120
  LogLevel:
    Description: Log level
    Type: String
    Default: "info"
  MSSQLDSN:
    Description: Template for OBC DSN string
    Type: String
    Default: "DSN=%(DSN)s;UID=%(USER)s;PWD=%(PASSWORD)s;trusted_connection=no;MARS_Connection=yes"
  RedisHost:
    Description: RedisHost
    Type: String
    Default: "redis"
  RedisPort:
    Description: RedisHost
    Type: Number
    Default: 6379
  DDBCursorTableName:
    Description: DynamoDB Table name which stores the cursor to the last processed
    Type: String
    Default: "esimport_cursor"
  PpkSqsQueueArn:
    Description: SQS Arn
    Type: String
  PpkDlqQueueArn:
    Description: SQS Arn
    Type: String
  DatadogAPIKey:
    Description: API key for Datadog service
    Type: String
Resources:
  ESImportEcsCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      Tags:
        - Key: contact
          Value: reporting
        - Key: product
          Value: esimport
        - Key: repo
          Value: esimport
        - Key: environment
          Value: production
        - Key: datadog
          Value: true
  EcsClusterDefaultAsgSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        ESImportEcsStack/EcsCluster/DefaultAutoScalingGroup/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: "10.0.0.0/8"
          Description: Eleven AWS internal network
          IpProtocol: -1
        - CidrIp: "11.0.0.0/8"
          Description: "Weird Eleven VPN network"
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: ESImportEcsStack/EcsCluster/DefaultAutoScalingGroup
        - Key: contact
          Value: reporting
        - Key: product
          Value: esimport
        - Key: repo
          Value: esimport
        - Key: environment
          Value: production
        - Key: datadog
          Value: true
      VpcId: !Ref VpcId
  EcsClusterDefaultAsgRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17
      Policies:
        # access to firehose
        - PolicyName: ESimportLogsToFirehoseAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "firehose:PutRecord"
                  - "firehose:PutRecordBatch"
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:firehose:*:${AWS::AccountId}:deliverystream/prod_log_stream"
                  - !Sub "arn:aws:firehose:*:${AWS::AccountId}:deliverystream/prod_syslog_stream"
                  - !Sub "arn:aws:firehose:*:${AWS::AccountId}:deliverystream/syslog-stream"
      Tags:
        - Key: Name
          Value: ESImportEcsStack/EcsCluster/DefaultAutoScalingGroup
        - Key: contact
          Value: reporting
        - Key: product
          Value: esimport
        - Key: repo
          Value: esimport
        - Key: environment
          Value: production
        - Key: datadog
          Value: true
  EcsClusterDefaultAsgPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "ecs:DeregisterContainerInstance"
              - "ecs:RegisterContainerInstance"
              - "ecs:Submit*"
            Effect: Allow
            Resource: !GetAtt
              - ESImportEcsCluster
              - Arn
          - Action:
              - "ecs:Poll"
              - "ecs:StartTelemetrySession"
            Condition:
              ArnEquals:
                "ecs:cluster": !GetAtt
                  - ESImportEcsCluster
                  - Arn
            Effect: Allow
            Resource: "*"
          - Action:
              - "ecr:GetAuthorizationToken"
              - "ecs:DiscoverPollEndpoint"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Effect: Allow
            Resource: "*"
        Version: 2012-10-17
      PolicyName: EcsClusterDefaultAsgPolicy
      Roles:
        - !Ref EcsClusterDefaultAsgRole
  EcsInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      # only 1 role can be assigined limitation by AWS
      Roles:
        - !Ref EcsClusterDefaultAsgRole
  EcsClusterLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !GetAtt
            - EcsClusterDefaultAsgSG
            - GroupId
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Arn: !GetAtt EcsInstanceProfile.Arn
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: True
              Encrypted: True
              VolumeSize: 30
              VolumeType: gp2
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${ESImportEcsCluster} >> /etc/ecs/ecs.config
            yum install -y \
              aws-cfn-bootstrap \
              iptables-services

            # Add 1GiB swap file
            sudo dd if=/dev/zero of=/swapfile bs=1M count=1024
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo "/swapfile swap swap defaults 0 0" >> /etc/fstab
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EcsClusterDefaultASG --region ${AWS::Region}

            # firewall rules
            iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP

            # allow all outgoing connections
            iptables -A OUTPUT -j ACCEPT

            # Allow only ssh from internal network
            iptables -A INPUT -p tcp --dport ssh -s 10.0.0.0/8 -j ACCEPT
            iptables -A INPUT -m conntrack -j ACCEPT  --ctstate RELATED,ESTABLISHED

            # next row necessary to provide acess for ecs agent from docker containers,
            # containers will load from it metadata about tasks
            iptables -A INPUT -d 127.0.0.0/8 -i docker0 -p tcp -m tcp --dport 51679 -j ACCEPT

            # drop everything else
            iptables -A INPUT -j DROP

            iptables-save | tee /etc/sysconfig/iptables && systemctl enable --now iptables


            echo 'ECS_AWSVPC_BLOCK_IMDS=true' >> /etc/ecs/ecs.config
            echo ECS_AVAILABLE_LOGGING_DRIVERS='["journald"]' >> /etc/ecs/ecs.config

            export FAIR_LOG_FIREHOSE_STREAM=${FirehoseStream}
            export ELEVEN_PRODUCT=ESImport
            export ELEVEN_COMPONENT="${ElevenComponent}"

            # Install log aggregator
            curl -SL https://github.com/eleven-software/log-aggregator/releases/download/1.6/log_aggregator_1.6.tar.gz -o log_aggregator_1.6.tar.gz
            tar -xzf log_aggregator_1.6.tar.gz
            chmod +x setup-logger.sh
            sh setup-logger.sh $FAIR_LOG_FIREHOSE_STREAM "Reporting API" "Esimport"

            # Install ClamAV, update signatures
            yum install -y clamav-data \
            	clamav-update \
            	clamav-filesystem \
            	clamav

            # Configure Cron for ClamAV
            (
                crontab -l 2>/dev/null || true
                echo '0 22 * * 0 /usr/bin/systemd-cat -t clamscan -p info  --level-prefix=true /usr/bin/clamscan --stdout -r -i -o --exclude-dir="^/sys|^/dev|^/proc" / '
            ) | crontab -

    DependsOn:
      - EcsClusterDefaultAsgPolicy
      - EcsClusterDefaultAsgRole
  EcsClusterDefaultASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      MinSize: "1"
      MaxSize: "1"
      DesiredCapacity: "1"
      LaunchTemplate:
        LaunchTemplateId: !Ref EcsClusterLaunchTemplate
        Version: !GetAtt EcsClusterLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: ESImportEcsStack/EcsCluster/DefaultAutoScalingGroup
        - Key: contact
          PropagateAtLaunch: true
          Value: reporting
        - Key: product
          PropagateAtLaunch: true
          Value: esimport
        - Key: repo
          PropagateAtLaunch: true
          Value: esimport
        - Key: environment
          PropagateAtLaunch: true
          Value: production
        - Key: datadog
          PropagateAtLaunch: true
          Value: true
      VPCZoneIdentifier: !Ref InstancesSbunet
    CreationPolicy:
      ResourceSignal:
        Count: "1"
        Timeout: PT5M
    UpdatePolicy:
      # Ref: https://aws.amazon.com/premiumsupport/knowledge-center/auto-scaling-group-rolling-updates/
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        MinSuccessfulInstancesPercent: 50
        WaitOnResourceSignals: True
        PauseTime: "PT15M"
        SuspendProcesses:
          - "HealthCheck"
          - "ReplaceUnhealthy"
          - "AZRebalance"
          - "AlarmNotification"
          - "ScheduledActions"
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
  ESImportTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Tags:
        - Key: contact
          Value: reporting
        - Key: product
          Value: esimport
        - Key: repo
          Value: esimport
        - Key: environment
          Value: production
        - Key: datadog
          Value: true
      ContainerDefinitions:
        - Name: redis
          Hostname: redis
          Image: redis:5-alpine
          Command:
            - --save "" --appendonly no
          Essential: true
          LogConfiguration:
            LogDriver: journald
            Options:
              tag: esimport_redis
          MemoryReservation: 800

        - Name: accounts
          Links:
            - redis
          EntryPoint:
            - "/esimport/docker-entrypoint.sh"
          Command: ["esimport", "sync", "accounts"]
          Essential: true
          Image: !Ref ESImportImage
          Environment:
            - Name: MSSQL_HOST
              Value: !Ref MssqlHost
            - Name: MSSQL_USER
              Value: !Ref MssqlUser
            - Name: MSSQL_PASSWORD
              Value: !Ref MssqlPassword
            - Name: MSSQL_PARAMETER_NAME
              Value: !Ref MssqlParameterName
            - Name: SNS_TOPIC_ARN
              Value: !Ref SnsTopicArn
            - Name: PPK_SQS_QUEUE_URL
              Value: !Ref PpkSqsQueueURL
            - Name: PPK_DLQ_QUEUE_URL
              Value: !Ref PpkDlqQueueURL
            - Name: DATABASE_CALLS_WAIT_IN_SECONDS
              Value: !Ref DatabaseCallsWaitInSeconds
            - Name: DATABASE_QUERY_TIMEOUT
              Value: !Ref DatabaseQueryTimeout
            - Name: LOG_LEVEL
              Value: !Ref LogLevel
            - Name: MSSQL_DSN
              Value: !Ref MSSQLDSN
            - Name: REDIS_HOST
              Value: !Ref RedisHost
            - Name: REDIS_PORT
              Value: !Ref RedisPort
            - Name: AWS_DEFAULT_REGION
              Value: !Ref "AWS::Region"
            - Name: DATADOG_API_KEY
              Value: !Ref DatadogAPIKey
            - Name: DATADOG_ENV
              Value: !Ref "AWS::Region"

          LogConfiguration:
            LogDriver: journald
            Options:
              tag: esimport_accounts
          MemoryReservation: 1024

        - Name: conferences
          Links:
            - redis
          EntryPoint:
            - "/esimport/docker-entrypoint.sh"
          Command: ["esimport", "sync", "conferences"]
          Essential: true
          Image: !Ref ESImportImage
          Environment:
            - Name: MSSQL_HOST
              Value: !Ref MssqlHost
            - Name: MSSQL_USER
              Value: !Ref MssqlUser
            - Name: MSSQL_PASSWORD
              Value: !Ref MssqlPassword
            - Name: MSSQL_PARAMETER_NAME
              Value: !Ref MssqlParameterName
            - Name: SNS_TOPIC_ARN
              Value: !Ref SnsTopicArn
            - Name: PPK_SQS_QUEUE_URL
              Value: !Ref PpkSqsQueueURL
            - Name: PPK_DLQ_QUEUE_URL
              Value: !Ref PpkDlqQueueURL
            - Name: DATABASE_CALLS_WAIT_IN_SECONDS
              Value: !Ref DatabaseCallsWaitInSeconds
            - Name: DATABASE_QUERY_TIMEOUT
              Value: !Ref DatabaseQueryTimeout
            - Name: LOG_LEVEL
              Value: !Ref LogLevel
            - Name: MSSQL_DSN
              Value: !Ref MSSQLDSN
            - Name: REDIS_HOST
              Value: !Ref RedisHost
            - Name: REDIS_PORT
              Value: !Ref RedisPort
            - Name: AWS_DEFAULT_REGION
              Value: !Ref "AWS::Region"
            - Name: DATADOG_API_KEY
              Value: !Ref DatadogAPIKey
            - Name: DATADOG_ENV
              Value: !Ref "AWS::Region"
          LogConfiguration:
            LogDriver: journald
            Options:
              tag: esimport_conferences
          MemoryReservation: 1024

        - Name: devices
          Links:
            - redis
          EntryPoint:
            - "/esimport/docker-entrypoint.sh"
          Command: ["esimport", "sync", "devices"]
          Essential: true
          Image: !Ref ESImportImage
          Environment:
            - Name: MSSQL_HOST
              Value: !Ref MssqlHost
            - Name: MSSQL_USER
              Value: !Ref MssqlUser
            - Name: MSSQL_PASSWORD
              Value: !Ref MssqlPassword
            - Name: MSSQL_PARAMETER_NAME
              Value: !Ref MssqlParameterName
            - Name: SNS_TOPIC_ARN
              Value: !Ref SnsTopicArn
            - Name: PPK_SQS_QUEUE_URL
              Value: !Ref PpkSqsQueueURL
            - Name: PPK_DLQ_QUEUE_URL
              Value: !Ref PpkDlqQueueURL
            - Name: DATABASE_CALLS_WAIT_IN_SECONDS
              Value: !Ref DatabaseCallsWaitInSeconds
            - Name: DATABASE_QUERY_TIMEOUT
              Value: !Ref DatabaseQueryTimeout
            - Name: LOG_LEVEL
              Value: !Ref LogLevel
            - Name: MSSQL_DSN
              Value: !Ref MSSQLDSN
            - Name: REDIS_HOST
              Value: !Ref RedisHost
            - Name: REDIS_PORT
              Value: !Ref RedisPort
            - Name: AWS_DEFAULT_REGION
              Value: !Ref "AWS::Region"
            - Name: DATADOG_API_KEY
              Value: !Ref DatadogAPIKey
            - Name: DATADOG_ENV
              Value: !Ref "AWS::Region"
          LogConfiguration:
            LogDriver: journald
            Options:
              tag: esimport_devices
          MemoryReservation: 1024

        - Name: properties
          Links:
            - redis
          EntryPoint:
            - "/esimport/docker-entrypoint.sh"
          Command: ["esimport", "sync", "properties"]
          Essential: true
          Image: !Ref ESImportImage
          Environment:
            - Name: MSSQL_HOST
              Value: !Ref MssqlHost
            - Name: MSSQL_USER
              Value: !Ref MssqlUser
            - Name: MSSQL_PASSWORD
              Value: !Ref MssqlPassword
            - Name: MSSQL_PARAMETER_NAME
              Value: !Ref MssqlParameterName
            - Name: SNS_TOPIC_ARN
              Value: !Ref SnsTopicArn
            - Name: PPK_SQS_QUEUE_URL
              Value: !Ref PpkSqsQueueURL
            - Name: PPK_DLQ_QUEUE_URL
              Value: !Ref PpkDlqQueueURL
            - Name: DATABASE_CALLS_WAIT_IN_SECONDS
              Value: !Ref DatabaseCallsWaitInSeconds
            - Name: DATABASE_QUERY_TIMEOUT
              Value: !Ref DatabaseQueryTimeout
            - Name: LOG_LEVEL
              Value: !Ref LogLevel
            - Name: MSSQL_DSN
              Value: !Ref MSSQLDSN
            - Name: REDIS_HOST
              Value: !Ref RedisHost
            - Name: REDIS_PORT
              Value: !Ref RedisPort
            - Name: AWS_DEFAULT_REGION
              Value: !Ref "AWS::Region"
            - Name: DATADOG_API_KEY
              Value: !Ref DatadogAPIKey
            - Name: DATADOG_ENV
              Value: !Ref "AWS::Region"
          LogConfiguration:
            LogDriver: journald
            Options:
              tag: esimport_properties
          MemoryReservation: 1024

        - Name: sessions
          Links:
            - redis
          EntryPoint:
            - "/esimport/docker-entrypoint.sh"
          Command: ["esimport", "sync", "sessions"]
          Essential: true
          Image: !Ref ESImportImage
          Environment:
            - Name: MSSQL_HOST
              Value: !Ref MssqlHost
            - Name: MSSQL_USER
              Value: !Ref MssqlUser
            - Name: MSSQL_PASSWORD
              Value: !Ref MssqlPassword
            - Name: MSSQL_PARAMETER_NAME
              Value: !Ref MssqlParameterName
            - Name: SNS_TOPIC_ARN
              Value: !Ref SnsTopicArn
            - Name: PPK_SQS_QUEUE_URL
              Value: !Ref PpkSqsQueueURL
            - Name: PPK_DLQ_QUEUE_URL
              Value: !Ref PpkDlqQueueURL
            - Name: DATABASE_CALLS_WAIT_IN_SECONDS
              Value: !Ref DatabaseCallsWaitInSeconds
            - Name: DATABASE_QUERY_TIMEOUT
              Value: !Ref DatabaseQueryTimeout
            - Name: LOG_LEVEL
              Value: !Ref LogLevel
            - Name: MSSQL_DSN
              Value: !Ref MSSQLDSN
            - Name: REDIS_HOST
              Value: !Ref RedisHost
            - Name: REDIS_PORT
              Value: !Ref RedisPort
            - Name: AWS_DEFAULT_REGION
              Value: !Ref "AWS::Region"
            - Name: DATADOG_API_KEY
              Value: !Ref DatadogAPIKey
            - Name: DATADOG_ENV
              Value: !Ref "AWS::Region"
          LogConfiguration:
            LogDriver: journald
            Options:
              tag: esimport_sessions
          MemoryReservation: 1024

        - Name: sessions-current
          Links:
            - redis
          EntryPoint:
            - "/esimport/docker-entrypoint.sh"
          Command: ["esimport", "sync", "sessions_current"]
          Essential: false
          Image: !Ref ESImportImage
          Environment:
            - Name: MSSQL_HOST
              Value: !Ref MssqlHost
            - Name: MSSQL_USER
              Value: !Ref MssqlUser
            - Name: MSSQL_PASSWORD
              Value: !Ref MssqlPassword
            - Name: MSSQL_PARAMETER_NAME
              Value: !Ref MssqlParameterName
            - Name: SNS_TOPIC_ARN
              Value: !Ref SnsTopicArn
            - Name: PPK_SQS_QUEUE_URL
              Value: !Ref PpkSqsQueueURL
            - Name: PPK_DLQ_QUEUE_URL
              Value: !Ref PpkDlqQueueURL
            - Name: DATABASE_CALLS_WAIT_IN_SECONDS
              Value: !Ref DatabaseCallsWaitInSeconds
            - Name: DATABASE_QUERY_TIMEOUT
              Value: !Ref DatabaseQueryTimeout
            - Name: LOG_LEVEL
              Value: !Ref LogLevel
            - Name: MSSQL_DSN
              Value: !Ref MSSQLDSN
            - Name: REDIS_HOST
              Value: !Ref RedisHost
            - Name: REDIS_PORT
              Value: !Ref RedisPort
            - Name: AWS_DEFAULT_REGION
              Value: !Ref "AWS::Region"
            - Name: DATADOG_API_KEY
              Value: !Ref DatadogAPIKey
            - Name: DATADOG_ENV
              Value: !Ref "AWS::Region"
          LogConfiguration:
            LogDriver: journald
            Options:
              tag: esimport_sessions_current
          MemoryReservation: 1024

        - Name: sessions-ppk
          Links:
            - redis
          EntryPoint:
            - "/esimport/docker-entrypoint.sh"
          Command: ["esimport", "sync", "sessions_ppk"]
          Essential: true
          Image: !Ref ESImportImage
          Environment:
            - Name: MSSQL_HOST
              Value: !Ref MssqlHost
            - Name: MSSQL_USER
              Value: !Ref MssqlUser
            - Name: MSSQL_PASSWORD
              Value: !Ref MssqlPassword
            - Name: MSSQL_PARAMETER_NAME
              Value: !Ref MssqlParameterName
            - Name: SNS_TOPIC_ARN
              Value: !Ref SnsTopicArn
            - Name: PPK_SQS_QUEUE_URL
              Value: !Ref PpkSqsQueueURL
            - Name: PPK_DLQ_QUEUE_URL
              Value: !Ref PpkDlqQueueURL
            - Name: DATABASE_CALLS_WAIT_IN_SECONDS
              Value: !Ref DatabaseCallsWaitInSeconds
            - Name: DATABASE_QUERY_TIMEOUT
              Value: !Ref DatabaseQueryTimeout
            - Name: LOG_LEVEL
              Value: !Ref LogLevel
            - Name: MSSQL_DSN
              Value: !Ref MSSQLDSN
            - Name: REDIS_HOST
              Value: !Ref RedisHost
            - Name: REDIS_PORT
              Value: !Ref RedisPort
            - Name: AWS_DEFAULT_REGION
              Value: !Ref "AWS::Region"
            - Name: DATADOG_API_KEY
              Value: !Ref DatadogAPIKey
            - Name: DATADOG_ENV
              Value: !Ref "AWS::Region"
          LogConfiguration:
            LogDriver: journald
            Options:
              tag: esimport_sessions_ppk
          MemoryReservation: 1024

        - Name: sessions-ppk-2
          Links:
            - redis
          EntryPoint:
            - "/esimport/docker-entrypoint.sh"
          Command: ["esimport", "sync", "sessions_ppk_2"]
          Essential: true
          Image: !Ref ESImportImage
          Environment:
            - Name: MSSQL_HOST
              Value: !Ref MssqlHost
            - Name: MSSQL_USER
              Value: !Ref MssqlUser
            - Name: MSSQL_PASSWORD
              Value: !Ref MssqlPassword
            - Name: MSSQL_PARAMETER_NAME
              Value: !Ref MssqlParameterName
            - Name: SNS_TOPIC_ARN
              Value: !Ref SnsTopicArn
            - Name: PPK_SQS_QUEUE_URL
              Value: !Ref PpkSqsQueueURL
            - Name: PPK_DLQ_QUEUE_URL
              Value: !Ref PpkDlqQueueURL
            - Name: DATABASE_CALLS_WAIT_IN_SECONDS
              Value: !Ref DatabaseCallsWaitInSeconds
            - Name: DATABASE_QUERY_TIMEOUT
              Value: !Ref DatabaseQueryTimeout
            - Name: LOG_LEVEL
              Value: !Ref LogLevel
            - Name: MSSQL_DSN
              Value: !Ref MSSQLDSN
            - Name: REDIS_HOST
              Value: !Ref RedisHost
            - Name: REDIS_PORT
              Value: !Ref RedisPort
            - Name: AWS_DEFAULT_REGION
              Value: !Ref "AWS::Region"
            - Name: DATADOG_API_KEY
              Value: !Ref DatadogAPIKey
            - Name: DATADOG_ENV
              Value: !Ref "AWS::Region"
          LogConfiguration:
            LogDriver: journald
            Options:
              tag: esimport_sessions_ppk
          MemoryReservation: 1024

      ExecutionRoleArn:
        Fn::GetAtt:
          - ExecutionRole
          - Arn
      Family: ESImportEcsStack
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - TaskRole
          - Arn
  ESImportTaskLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 365
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  ExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: contact
          Value: reporting
        - Key: product
          Value: esimport
        - Key: repo
          Value: esimport
        - Key: environment
          Value: production
        - Key: datadog
          Value: true
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
  ExecutionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
            Effect: Allow
            # The function bellow will generate a repository ARN based on the passed image value.
            Resource:
              - !Sub
                - "arn:aws:ecr:*:${AWSAccountID}:repository/esimport"
                - AWSAccountID: !Select [0, !Split [".", !Ref ESImportImage]]
                # the string above will select account id from arn of image
                # arn of image is look like this 615423619382.dkr.ecr.us-west-2.amazonaws.com/esimport:d0a...
          - Action: "ecr:GetAuthorizationToken"
            Effect: Allow
            Resource: "*"
          - Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Effect: Allow
            Resource: !GetAtt ESImportTaskLogGroup.Arn
        Version: 2012-10-17
      PolicyName: ExecutionPolicy
      Roles:
        - !Ref ExecutionRole
  TaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: contact
          Value: reporting
        - Key: product
          Value: esimport
        - Key: repo
          Value: esimport
        - Key: environment
          Value: production
        - Key: datadog
          Value: true
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:ecs:*:${AWS::AccountId}:*"
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"
      Policies:
        - PolicyName: ESImportTaskPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - dynamodb:BatchGet*
                  - dynamodb:DescribeStream
                  - dynamodb:DescribeTable
                  - dynamodb:Get*
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWrite*
                  - dynamodb:CreateTable
                  - dynamodb:Delete*
                  - dynamodb:Update*
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Effect: Allow
                Resource: !Sub "arn:aws:dynamodb:*:${AWS::AccountId}:table/${DDBCursorTableName}"
              - Action:
                  - sns:ConfirmSubscription
                  - sns:CreateTopic
                  - sns:DeleteTopic
                  - sns:Publish
                  - sns:Subscribe
                  - sns:Unsubscribe
                Effect: Allow
                Resource: !Ref SnsTopicArn
              - Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:CreateQueue
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Effect: Allow
                Resource:
                  - !Ref PpkSqsQueueArn
                  - !Ref PpkDlqQueueArn
  ESImportEcsService:
    Type: "AWS::ECS::Service"
    Properties:
      Tags:
        - Key: contact
          Value: reporting
        - Key: product
          Value: esimport
        - Key: repo
          Value: esimport
        - Key: environment
          Value: production
        - Key: datadog
          Value: true
      Cluster: !Ref ESImportEcsCluster
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      EnableECSManagedTags: true
      PropagateTags: SERVICE
      LaunchType: EC2
      SchedulingStrategy: DAEMON
      TaskDefinition: !Ref ESImportTask
      ServiceName: ESImportECS
